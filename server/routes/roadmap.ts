
// Function to generate roadmap based on user data
import { Request, Response } from 'express';
import Onboard from '../models/onboard';
import Roadmap from "../models/roadmap";
const axios = require('axios');
const Deepseek = process.env.DEEPSEEK_API_KEY; // Get the DeepSeek API key from environment variables

// DeepSeek API call function to generate the roadmap based on user data in JSON format
const callDeepSeekForRoadmap = async (userData:any) => {
  try {
    // Construct the dynamic prompt based on user data
    const prompt = `
    Based on the provided user data, act as a professional carrer counsellor and create a 6-month roadmap to help them become a Software Development Engineer (SDE). The roadmap should include:
    - **month**: Month number (1 to 6).
    - **focus**: Main focus of the month (e.g., Frontend, Backend, Full-stack integration or any other technology specific to the user coding goals and their interets).
    - **topics**: Topics to learn each month.
    - **resources**: Recommended resources (books, websites, courses).
    - **codingChallenges**: Coding challenges to solve.
    - **project**: Project to build during the month.

    The roadmap should follow this dummy format and the tags should be in the same format as shown below the data should be changed by the user data: 
    {
      "roadmap": {
        "student": "Shashwat",
        "goal": "Full-Stack Developer (Remote)",
        "timeline": "6 Months",
        "monthlyCommitment": "1-5 hours/day",
        "months": [
          {
            "month": 1,
            "focus": "Web Fundamentals & JavaScript Basics",
            "topics": ["HTML/CSS Basics", "JavaScript Syntax", "DOM Manipulation"],
            "project": "Static Portfolio Website",
            "resources": ["freeCodeCamp Responsive Web Design", "MDN Web Docs", "JavaScript.info"],
            "codingChallenges": ["Build a calculator", "Create a responsive navbar"]
          },
          {
            "month": 2,
            "focus": "Frontend Development (React.js)",
            "topics": ["React Components", "State Management", "API Integration (Axios)"],
            "project": "E-Commerce Frontend",
            "resources": ["React Docs", "Scrimba React Course", "Frontend Masters React Path"],
            "codingChallenges": ["Build a weather app", "Create a to-do list with drag-and-drop"]
          },
          // Continue for months 3-6 with similar structure
        ],
        "successTips": ["Daily code practice", "Contribute to open-source", "Join dev communities"]
      }
    }

    Please generate the roadmap in this exact JSON format based on the following user data:
    User Data:
    - Name: ${userData.name}
    - Area of Interest: ${userData.areaOfInterest || 'N/A'}
    - Skill Level: ${userData.skillLevel || 'N/A'}
    - Preferred Language: ${userData.preferredLanguage || 'N/A'}
    - Experience Level: ${userData.experienceLevel || 'N/A'}
    - Learning Path: ${userData.learningPath || 'N/A'}
    - Study Year: ${userData.studyYear || 'N/A'}
    - Coding Goals: ${userData.codingGoals || 'N/A'}
    - Communication Tools: ${userData.communicationTools  || 'N/A'}
    - Assessment Type: ${userData.assessmentType || 'N/A'}
    - Career Stage: ${userData.careerStage || 'N/A'}
    - Time Commitment: ${userData.timeCommitment || 'N/A'}

    Ensure that the roadmap is realistic and personalized to the student's goals and background also remove the backticks while genearting the response.
    `;

    // Make the API call to DeepSeek via OpenRouter
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${Deepseek}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-r1:free", // Specify the model to use
        messages: [{ role: "user", content: prompt }],
      }),
    });

    const data = await response.json();

    // Return the content of the roadmap generated by DeepSeek in JSON format
    return data.choices[0].message.content;
  } catch (error) {
    console.error("Error calling DeepSeek API:", error);
    throw new Error("Failed to fetch data from DeepSeek API");
  }
};




export const generateRoadmap = async (req: Request, res: Response) => {
    try {
      // Generate the roadmap using DeepSeek API
      const roadmap = await callDeepSeekForRoadmap(req.body);
  console.log("Generated Roadmap:", roadmap);
      // Return the generated roadmap
      return res.status(200).json({roadmap})
    } catch (error) {
      console.error('Error generating roadmap:', error);
      return res.status(500).json({ message: 'Error generating roadmap' });
    }
  };


// Add Roadmap function to save the generated roadmap
export const addRoadmap = async (req: Request, res: Response) => {
  try {
    // Create a new roadmap using the data from the request body
    const newRoadmap = new Roadmap({
      student: req.body.student,
      goal: req.body.goal,
      timeline: req.body.timeline,
      monthlyCommitment: req.body.monthlyCommitment,
      months: req.body.months,
      successTips: req.body.successTips,
    });

    // Save the new roadmap to the database
    await newRoadmap.save();

    // Return success response
    return res.status(200).json({ message: 'Roadmap created successfully', roadmap: newRoadmap });
  } catch (error) {
    console.error('Error adding roadmap:', error);
    return res.status(500).json({ message: 'Error adding roadmap' });
  }
};


export const fetchAllRoadmaps = async (req: Request, res: Response) => {
  try {
    // Fetch all roadmaps from the database
    const roadmaps = await Roadmap.find();

    // Return all roadmaps in the response
    return res.status(200).json(roadmaps);
  } catch (error) {
    console.error('Error fetching all roadmaps:', error);
    return res.status(500).json({ message: 'Error fetching roadmaps' });
  }
};


export const fetchRoadmapById = async (req: Request, res: Response) => {
  try {
    const { roadmapId } = req.params;

    // Fetch the roadmap by its ID
    const roadmap = await Roadmap.findById(roadmapId);

    if (!roadmap) {
      return res.status(404).json({ message: 'Roadmap not found' });
    }

    // Return the roadmap data
    return res.status(200).json(roadmap);
  } catch (error) {
    console.error('Error fetching roadmap by ID:', error);
    return res.status(500).json({ message: 'Error fetching roadmap by ID' });
  }
};
